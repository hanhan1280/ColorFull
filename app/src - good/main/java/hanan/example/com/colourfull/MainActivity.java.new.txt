package hanan.example.com.colourfull;

import android.app.Dialog;
import android.content.Intent;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.drawable.ColorDrawable;
import android.os.Handler;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;

import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;


public class MainActivity extends AppCompatActivity {

    private int RGBvalue = 0;
    private int colourrand;
    private ProgressBar progressBar;
    private boolean alreadyChecked = false;
    private int updateBar = 0;
    private int score = 0;
    private int maxtime = 6000;
    private int delay = 1000;
    private boolean initialized = false;
    private boolean nextRound = true;
    public boolean delayNoPress = false;
    public TimerTask timertask;
    public TimerTask delayTimerTask;


    String colourarray[] = {"Blue", "Red", "Yellow", "Green"};
    int RGBarray[] = {R.color.myBLUE, R.color.myRED, R.color.myYELLOW, R.color.myGREEN};
    int scoreColor = R.color.myWHITE;
    Dialog myDialog;
    public Timer timer = new Timer();
    public Timer delayPressTimer = null;
    private Handler handler = new Handler();


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        TextView colourtext = findViewById(R.id.colourtext);
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        if (timer == null) {
            timer = new Timer();
        }
        timertask = new UpdateScreen();
        delayTimerTask = new OnDirectionFlag();
        myDialog = new Dialog(this);
        timer.scheduleAtFixedRate(timertask, 0, 40);

        Joystickview joystick = (Joystickview) findViewById(R.id.joystickview);
        //       joystick.callOnClick();
        joystick.setOnMoveListener(new Joystickview.OnMoveListener() {
/*            @Override
            public void onMove(int angle, int strength) {

            }*/

            @Override
            public void onDirection(int mydirection) {
                if (mydirection > 0) {
                    if (!delayNoPress) {
                        TextView rightwrong = findViewById(R.id.answer);
                        rightwrong.setTextColor(getResources().getColor(scoreColor));
                        if (mydirection == (colourrand + 1)) {
                            if (!alreadyChecked) {
                                score += 1;
                                maxtime -= 50;
                                delay -= 25;
                                nextRound = true;
                                if (nextRound) {
                                    delayNoPress = true;
                                    delayPressTimer = new Timer();
                                    delayTimerTask = new OnDirectionFlag();
                                    delayPressTimer.schedule(delayTimerTask, delay);
                                    updateBar = maxtime;
                                }
                                if (maxtime <= 0) {
                                    maxtime = 100;
                                }
                                alreadyChecked = true;
                            }

                            rightwrong.setText(Integer.toString(score));
                        } else {
                            MainActivity.this.timer.cancel();
                            MainActivity.this.delayPressTimer.cancel();
                            MainActivity.this.delayPressTimer = null;
                            MainActivity.this.timer = null;
                            alreadyChecked = true;
                            gameover();
                        }
                    }

                }
            }
        });
    }

    public void gameover() {
        //myDialog = new Dialog(getApplicationContext());
       /*myDialog.setContentView(R.layout.gameoverscreen);
        myDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
        myDialog.show();*/

    }

    class UpdateScreen extends TimerTask {
        public void run() {
            if (updateBar <= maxtime && initialized) {
                updateBar += 40;

            } else if (updateBar >= maxtime && !nextRound) {
                MainActivity.this.timer.cancel();
                MainActivity.this.delayPressTimer.cancel();
                MainActivity.this.delayPressTimer = null;
                MainActivity.this.timer = null;
                alreadyChecked = true;

/*
                handler.post(new Runnable() {
                    @Override
                    public void run() {
//                                     gameover();
                    }
                });
                */
            } else {
                nextRound = false;
                int prevnumb;
                initialized = true;
                Random rand = new Random();
                colourrand = rand.nextInt(4);
                Random randRGB = new Random();
                prevnumb = RGBvalue;
                RGBvalue = randRGB.nextInt(4);
                while (RGBvalue == prevnumb) {
                    RGBvalue = randRGB.nextInt(4);
                }
                TextView colourtext = findViewById(R.id.colourtext);
                colourtext.setTextColor(getResources().getColor(RGBarray[RGBvalue]));
                colourtext.setText(colourarray[colourrand]);
                updateBar = 0;
                alreadyChecked = false;

            }
            progressBar = (ProgressBar) findViewById(R.id.progressBar);
            progressBar.setProgress(Math.round(updateBar * 100 / maxtime));
        }

    }

    class OnDirectionFlag extends TimerTask {
        public void run() {
            delayNoPress = false;
            if (delayPressTimer != null) {
                delayPressTimer.cancel();
            }
            delayPressTimer = null;
        }
    }


    @Override
    protected void onPause() {
        if (timer != null) {
            timer.cancel();
        }
        timer = null;
        super.onPause();
    }

    @Override
    protected void onResume() {
        if (timer == null) {
            timer = new Timer();
        }
        TimerTask timertask = new UpdateScreen();
        timer.scheduleAtFixedRate(timertask, 0, 40);
        super.onResume();
    }

    @Override
    protected void onDestroy() {
        if (timer != null) {
            timer.cancel();
        }
        timer = null;
        super.onDestroy();
    }
}
